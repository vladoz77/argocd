nameOverride: argocd
fullnameOverride: argocd

crds:
  keep: trueJ

global:
  domain: argocd.dev.local
  logging:
    format: json
    level: info

configs:
  cm:
    application.resourceTrackingMethod: annotation
    controller.diff.server.side: "true"
    # Dex configuration
    dex.config: |
      connectors:
      - config:
          issuer: https://auth.dev.local/application/o/argocd/
          clientID: RBmL0vBCXBQ6CUhEfGphFgWTtRJrW66enAJvOhet
          clientSecret: $dex.authentik.clientSecret
          insecureEnableGroups: true
          scopes:
            - openid
            - profile
            - email
        name: authentik
        type: oidc
        id: authentik
  params:
    server.insecure: true
  secret:
    # htpasswd -nbBC 10 "" $ARGO_PWD | tr -d ':\n' | sed 's/$2y/$2a/'
    argocdServerAdminPassword: "$2a$10$S6gJky57fHflfWp7RC7Y6OLTN1I6VMRelH/jsNP3DCxOyVf5JVf9a"
    extra:
      dex.authentik.clientSecret: "UDBud0JtbGhpTnhDWDBUS2tJNHFNT1F1RjJPRjVkdEU5R3BxV3hTT2FDYlo5STF3eTVsaEhnVzJ5ZUNiNXRrdEM1bXZlc2taTU1sTEdsTG16N25GSlBqVUloeGRYV0pPRXA2V0NhOHdWZFRxdnVWcXdSQ3JiV3huZ1h1aEtZczI="
  rbac:
    create: true
    # Need create groups ArgocdAdmins and ArgocdViewers in OIDC Provider
    policy.csv: |
      g, ArgoCD Admins, role:admin
      g, ArgoCD Viewers, role:readonly

controller:
  replicas: 1
  metrics:
    enabled: true
    service:
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "8082"

# if we have oauth cert
dex:
  image:
    tag: v2.41.1
  # Create secret for sso tls
  # k get secrets -n auth authentik-tls -o json | jq '.data."ca.crt"' | base64 -di > /tmp/auth-ca.crt
  # k create secret generic -n argocd auth-ca-certs --from-file=auth-ca.pem=/tmp/auth-ca.crt
  volumes:
  - name: auth-ca-certs
    secret:
      secretName: auth-ca-certs
  volumeMounts:
  - mountPath: /etc/ssl/certs/auth-ca.pem
    name: auth-ca-certs
    subPath: auth-ca.pem
  livenessProbe:
    enabled: true
    httpPath: /api/dex/.well-known/openid-configuration
    httpPort: 5556
    httpScheme: HTTPS

server:
  certificate:
    enabled: true
    domain: argocd.dev.local
    renewBefore: 360h
    duration: 9125h
    issuer:
      group: cert-manager.io
      kind: ClusterIssuer
      name: ca-issuer
    privateKey:
      algorithm: RSA
      encoding: PKCS8
      size: 4096
      rotationPolicy: Always
    usages:
    - server auth
  ingress:
    enabled: true
    annotations:
      nginx.ingress.kubernetes.io/ssl-redirect: "true"
    hostname: argocd.dev.local
    path: /
    pathType: Prefix
    tls: true
  metrics:
    enabled: true
    service:
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "8083"

repoServer:
  volumes:
  - name: ca-certs
    secret:
      secretName: ca-certs
  volumeMounts:
  - mountPath: /etc/ssl/certs/ca.pem
    name: ca-certs
    subPath: ca.pem
  metrics:
    enabled: true
    service:
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "8084"
