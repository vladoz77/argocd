namespaceOverride: ingress-nginx
controller:
  replicaCount: 2
  # opentelemetry:
  #   enabled: true
  ingressClassResource:
    name: nginx
    enabled: true
    default: true
    controllerValue: "k8s.io/ingress-nginx"

  config:
    # Print access log to file instead of stdout
    # Separating acces logs from the rest
    # access-log-path: "/data/access.log"
    log-format-escape-json: "true"
    log-format-upstream: '{"source": "nginx", "time": $msec, "resp_body_size": $body_bytes_sent, "request_host": "$http_host", "request_address": "$remote_addr", "request_length": $request_length, "request_method": "$request_method", "uri": "$request_uri", "status": $status,  "user_agent": "$http_user_agent", "resp_time": $request_time, "upstream_addr": "$upstream_addr", "trace_id": "$opentelemetry_trace_id", "span_id": "$opentelemetry_span_id"}'
    # Open Telemetry
    enable-opentelemetry: "true"
    otlp-collector-host: otel-collector.tempo.svc.cluster.local
    otlp-service-name: nginx-internal
    
    

  affinity:
    podAntiAffinity:
      requiredDuringSchedulingIgnoredDuringExecution:
        - labelSelector:
            matchExpressions:
              - key: "app.kubernetes.io/name"
                operator: In
                values:
                  - ingress-nginx
          topologyKey: "kubernetes.io/hostname"

  replicaCount: 1
  minAvailable: 1
  # resources:
  #   requests:
  #     cpu: 100m
  #     memory: 90Mi

  service:
    enabled: true
    type: LoadBalancer
    

  admissionWebhooks:
    enabled: false

  metrics:
    enabled: true
    service:
      annotations:
       prometheus.io/scrape: "true"
       prometheus.io/port: "10254"

  # priorityClassName: "medium-priority"

revisionHistoryLimit: 2